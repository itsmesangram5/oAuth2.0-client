/*
 * This file is generated by jOOQ.
 */
package com.getreferral.client.jooq.tables;


import com.getreferral.client.jooq.Indexes;
import com.getreferral.client.jooq.JdbcSession;
import com.getreferral.client.jooq.Keys;
import com.getreferral.client.jooq.tables.SpringSessionAttributes.SpringSessionAttributesPath;
import com.getreferral.client.jooq.tables.records.SpringSessionRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpringSession extends TableImpl<SpringSessionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jdbc_session.spring_session</code>
     */
    public static final SpringSession SPRING_SESSION = new SpringSession();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpringSessionRecord> getRecordType() {
        return SpringSessionRecord.class;
    }

    /**
     * The column <code>jdbc_session.spring_session.PRIMARY_ID</code>.
     */
    public final TableField<SpringSessionRecord, String> PRIMARY_ID = createField(DSL.name("PRIMARY_ID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>jdbc_session.spring_session.SESSION_ID</code>.
     */
    public final TableField<SpringSessionRecord, String> SESSION_ID = createField(DSL.name("SESSION_ID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>jdbc_session.spring_session.CREATION_TIME</code>.
     */
    public final TableField<SpringSessionRecord, Long> CREATION_TIME = createField(DSL.name("CREATION_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jdbc_session.spring_session.LAST_ACCESS_TIME</code>.
     */
    public final TableField<SpringSessionRecord, Long> LAST_ACCESS_TIME = createField(DSL.name("LAST_ACCESS_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>jdbc_session.spring_session.MAX_INACTIVE_INTERVAL</code>.
     */
    public final TableField<SpringSessionRecord, Integer> MAX_INACTIVE_INTERVAL = createField(DSL.name("MAX_INACTIVE_INTERVAL"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jdbc_session.spring_session.EXPIRY_TIME</code>.
     */
    public final TableField<SpringSessionRecord, Long> EXPIRY_TIME = createField(DSL.name("EXPIRY_TIME"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jdbc_session.spring_session.PRINCIPAL_NAME</code>.
     */
    public final TableField<SpringSessionRecord, String> PRINCIPAL_NAME = createField(DSL.name("PRINCIPAL_NAME"), SQLDataType.VARCHAR(100), this, "");

    private SpringSession(Name alias, Table<SpringSessionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpringSession(Name alias, Table<SpringSessionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jdbc_session.spring_session</code> table
     * reference
     */
    public SpringSession(String alias) {
        this(DSL.name(alias), SPRING_SESSION);
    }

    /**
     * Create an aliased <code>jdbc_session.spring_session</code> table
     * reference
     */
    public SpringSession(Name alias) {
        this(alias, SPRING_SESSION);
    }

    /**
     * Create a <code>jdbc_session.spring_session</code> table reference
     */
    public SpringSession() {
        this(DSL.name("spring_session"), null);
    }

    public <O extends Record> SpringSession(Table<O> path, ForeignKey<O, SpringSessionRecord> childPath, InverseForeignKey<O, SpringSessionRecord> parentPath) {
        super(path, childPath, parentPath, SPRING_SESSION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpringSessionPath extends SpringSession implements Path<SpringSessionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpringSessionPath(Table<O> path, ForeignKey<O, SpringSessionRecord> childPath, InverseForeignKey<O, SpringSessionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpringSessionPath(Name alias, Table<SpringSessionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpringSessionPath as(String alias) {
            return new SpringSessionPath(DSL.name(alias), this);
        }

        @Override
        public SpringSessionPath as(Name alias) {
            return new SpringSessionPath(alias, this);
        }

        @Override
        public SpringSessionPath as(Table<?> alias) {
            return new SpringSessionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JdbcSession.JDBC_SESSION;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SPRING_SESSION_SPRING_SESSION_IX2, Indexes.SPRING_SESSION_SPRING_SESSION_IX3);
    }

    @Override
    public UniqueKey<SpringSessionRecord> getPrimaryKey() {
        return Keys.KEY_SPRING_SESSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SpringSessionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SPRING_SESSION_SPRING_SESSION_IX1);
    }

    private transient SpringSessionAttributesPath _springSessionAttributes;

    /**
     * Get the implicit to-many join path to the
     * <code>jdbc_session.spring_session_attributes</code> table
     */
    public SpringSessionAttributesPath springSessionAttributes() {
        if (_springSessionAttributes == null)
            _springSessionAttributes = new SpringSessionAttributesPath(this, null, Keys.SPRING_SESSION_ATTRIBUTES_FK.getInverseKey());

        return _springSessionAttributes;
    }

    @Override
    public SpringSession as(String alias) {
        return new SpringSession(DSL.name(alias), this);
    }

    @Override
    public SpringSession as(Name alias) {
        return new SpringSession(alias, this);
    }

    @Override
    public SpringSession as(Table<?> alias) {
        return new SpringSession(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpringSession rename(String name) {
        return new SpringSession(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpringSession rename(Name name) {
        return new SpringSession(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpringSession rename(Table<?> name) {
        return new SpringSession(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSession where(Condition condition) {
        return new SpringSession(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSession where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSession where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSession where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSession where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSession where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSession where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSession where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSession whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSession whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
