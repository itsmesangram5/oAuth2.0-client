/*
 * This file is generated by jOOQ.
 */
package com.getreferral.client.jooq.tables;


import com.getreferral.client.jooq.JdbcSession;
import com.getreferral.client.jooq.Keys;
import com.getreferral.client.jooq.tables.SpringSession.SpringSessionPath;
import com.getreferral.client.jooq.tables.records.SpringSessionAttributesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpringSessionAttributes extends TableImpl<SpringSessionAttributesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>jdbc_session.spring_session_attributes</code>
     */
    public static final SpringSessionAttributes SPRING_SESSION_ATTRIBUTES = new SpringSessionAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpringSessionAttributesRecord> getRecordType() {
        return SpringSessionAttributesRecord.class;
    }

    /**
     * The column
     * <code>jdbc_session.spring_session_attributes.SESSION_PRIMARY_ID</code>.
     */
    public final TableField<SpringSessionAttributesRecord, String> SESSION_PRIMARY_ID = createField(DSL.name("SESSION_PRIMARY_ID"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column
     * <code>jdbc_session.spring_session_attributes.ATTRIBUTE_NAME</code>.
     */
    public final TableField<SpringSessionAttributesRecord, String> ATTRIBUTE_NAME = createField(DSL.name("ATTRIBUTE_NAME"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column
     * <code>jdbc_session.spring_session_attributes.ATTRIBUTE_BYTES</code>.
     */
    public final TableField<SpringSessionAttributesRecord, byte[]> ATTRIBUTE_BYTES = createField(DSL.name("ATTRIBUTE_BYTES"), SQLDataType.BLOB.nullable(false), this, "");

    private SpringSessionAttributes(Name alias, Table<SpringSessionAttributesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpringSessionAttributes(Name alias, Table<SpringSessionAttributesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>jdbc_session.spring_session_attributes</code>
     * table reference
     */
    public SpringSessionAttributes(String alias) {
        this(DSL.name(alias), SPRING_SESSION_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>jdbc_session.spring_session_attributes</code>
     * table reference
     */
    public SpringSessionAttributes(Name alias) {
        this(alias, SPRING_SESSION_ATTRIBUTES);
    }

    /**
     * Create a <code>jdbc_session.spring_session_attributes</code> table
     * reference
     */
    public SpringSessionAttributes() {
        this(DSL.name("spring_session_attributes"), null);
    }

    public <O extends Record> SpringSessionAttributes(Table<O> path, ForeignKey<O, SpringSessionAttributesRecord> childPath, InverseForeignKey<O, SpringSessionAttributesRecord> parentPath) {
        super(path, childPath, parentPath, SPRING_SESSION_ATTRIBUTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpringSessionAttributesPath extends SpringSessionAttributes implements Path<SpringSessionAttributesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpringSessionAttributesPath(Table<O> path, ForeignKey<O, SpringSessionAttributesRecord> childPath, InverseForeignKey<O, SpringSessionAttributesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpringSessionAttributesPath(Name alias, Table<SpringSessionAttributesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpringSessionAttributesPath as(String alias) {
            return new SpringSessionAttributesPath(DSL.name(alias), this);
        }

        @Override
        public SpringSessionAttributesPath as(Name alias) {
            return new SpringSessionAttributesPath(alias, this);
        }

        @Override
        public SpringSessionAttributesPath as(Table<?> alias) {
            return new SpringSessionAttributesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JdbcSession.JDBC_SESSION;
    }

    @Override
    public UniqueKey<SpringSessionAttributesRecord> getPrimaryKey() {
        return Keys.KEY_SPRING_SESSION_ATTRIBUTES_PRIMARY;
    }

    @Override
    public List<ForeignKey<SpringSessionAttributesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPRING_SESSION_ATTRIBUTES_FK);
    }

    private transient SpringSessionPath _springSession;

    /**
     * Get the implicit join path to the
     * <code>jdbc_session.spring_session</code> table.
     */
    public SpringSessionPath springSession() {
        if (_springSession == null)
            _springSession = new SpringSessionPath(this, Keys.SPRING_SESSION_ATTRIBUTES_FK, null);

        return _springSession;
    }

    @Override
    public SpringSessionAttributes as(String alias) {
        return new SpringSessionAttributes(DSL.name(alias), this);
    }

    @Override
    public SpringSessionAttributes as(Name alias) {
        return new SpringSessionAttributes(alias, this);
    }

    @Override
    public SpringSessionAttributes as(Table<?> alias) {
        return new SpringSessionAttributes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpringSessionAttributes rename(String name) {
        return new SpringSessionAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpringSessionAttributes rename(Name name) {
        return new SpringSessionAttributes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpringSessionAttributes rename(Table<?> name) {
        return new SpringSessionAttributes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSessionAttributes where(Condition condition) {
        return new SpringSessionAttributes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSessionAttributes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSessionAttributes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSessionAttributes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSessionAttributes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSessionAttributes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSessionAttributes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpringSessionAttributes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSessionAttributes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpringSessionAttributes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
